require("colors");
const readlineSync = require("readline-sync");

class Menu {
  constructor(wordService) {
    this.wordService = wordService;
  }

  showMainMenu() {
    console.clear();
    console.log("–§–õ–ï–®–ö–ê–†–¢–ö–ò –î–õ–Ø –í–ò–í–ß–ï–ù–ù–Ø –°–õ–Ü–í".rainbow.bold);
    console.log("‚ïê".repeat(40).gray);
    console.log("1. üìñ –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ —Å–ª–æ–≤–æ".cyan);
    console.log("2. üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç–∏ —Å–ª–æ–≤–∞".yellow);
    console.log("3. üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ —Å–ª–æ–≤–∞".blue);
    console.log("4. üîç –ü–æ—à—É–∫ —Å–ª–æ–≤–∞".magenta);
    console.log("5. üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞".green);
    console.log("6. üóëÔ∏è  –í–∏–¥–∞–ª–∏—Ç–∏ —Å–ª–æ–≤–æ".red);
    console.log("0. üö™ –í–∏—Ö—ñ–¥".gray);
    console.log("‚ïê".repeat(40).gray);
  }

  async start() {
    while (true) {
      this.showMainMenu();
      const choice = readlineSync.question("–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é: ".white.bold);

      try {
        switch (choice) {
          case "1":
            await this.addWord();
            break;
          case "2":
            await this.reviewWords();
            break;
          case "3":
            await this.showAllWords();
            break;
          case "4":
            await this.searchWord();
            break;
          case "5":
            await this.showStats();
            break;
          case "6":
            await this.deleteWord();
            break;
          case "0":
            console.log("üëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!".yellow);
            return;
          default:
            console.log("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä!".red);
            this.pause();
        }
      } catch (error) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞:".red, error.message);
        this.pause();
      }
    }
  }

  async addWord() {
    console.clear();
    console.log("üìñ –î–û–î–ê–í–ê–ù–ù–Ø –ù–û–í–û–ì–û –°–õ–û–í–ê".cyan.bold);
    console.log("‚ïê".repeat(30).gray);

    const word = readlineSync.question("–°–ª–æ–≤–æ (–∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é): ".white).trim();
    if (!word) {
      console.log("‚ùå –°–ª–æ–≤–æ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø—É—Å—Ç–∏–º!".red);
      this.pause();
      return;
    }

    const translation = readlineSync
      .question("–ü–µ—Ä–µ–∫–ª–∞–¥ (—É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é): ".white)
      .trim();
    if (!translation) {
      console.log("‚ùå –ü–µ—Ä–µ–∫–ª–∞–¥ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø—É—Å—Ç–∏–º!".red);
      this.pause();
      return;
    }

    const definition = readlineSync
      .question("–í–∏–∑–Ω–∞—á–µ–Ω–Ω—è (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ): ".gray)
      .trim();
    const example = readlineSync
      .question("–ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ): ".gray)
      .trim();

    const result = await this.wordService.addWord({
      word: word.toLowerCase(),
      translation,
      definition,
      example,
    });

    if (result.success) {
      console.log("‚úÖ –°–ª–æ–≤–æ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!".green);
    } else {
      console.log(`‚ùå ${result.error}`.red);
    }

    this.pause();
  }

  async reviewWords() {
    console.clear();
    console.log("üîÑ –ü–û–í–¢–û–†–ï–ù–ù–Ø –°–õ–Ü–í".yellow.bold);
    console.log("‚ïê".repeat(20).gray);

    const words = await this.wordService.getWordsForReview(10);

    if (words.length === 0) {
      console.log("üéâ –ù–µ–º–∞—î —Å–ª—ñ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è! –í—Å—ñ —Å–ª–æ–≤–∞ –≤–∏–≤—á–µ–Ω—ñ.".green);
      this.pause();
      return;
    }

    console.log(`–ó–Ω–∞–π–¥–µ–Ω–æ ${words.length} —Å–ª—ñ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è\n`.blue);

    let correct = 0;
    let total = 0;

    for (let i = 0; i < words.length; i++) {
      const word = words[i];
      console.clear();
      console.log(`üîÑ –ü–û–í–¢–û–†–ï–ù–ù–Ø (${i + 1}/${words.length})`.yellow.bold);
      console.log("‚ïê".repeat(30).gray);

      console.log(`\nüìù –°–ª–æ–≤–æ: ${word.word.toUpperCase().bold}`);
      if (word.definition) {
        console.log(`üí° –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è: ${word.definition.italic}`);
      }
      if (word.example) {
        console.log(`üìÑ –ü—Ä–∏–∫–ª–∞–¥: ${word.example.gray}`);
      }

      console.log(
        `\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${word.getSuccessRate()}% (${word.correctAnswers}/${
          word.totalAttempts
        })`
      );
      console.log("‚îÄ".repeat(30).gray);

      const userAnswer = readlineSync
        .question("\nü§î –í–∞—à –ø–µ—Ä–µ–∫–ª–∞–¥: ".white)
        .trim();

      const isCorrect =
        userAnswer.toLowerCase() === word.translation.toLowerCase();
      total++;

      if (isCorrect) {
        correct++;
        console.log("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!".green.bold);
      } else {
        console.log(
          `‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: ${word.translation.bold}`.red
        );
      }

      await this.wordService.updateWordStats(word, isCorrect);

      if (i < words.length - 1) {
        readlineSync.question("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...".gray);
      }
    }

    console.log(
      `\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${correct}/${total} (${Math.round(
        (correct / total) * 100
      )}%)`.bold
    );
    this.pause();
  }

  async showAllWords() {
    console.clear();
    console.log("üìã –£–°–Ü –°–õ–û–í–ê".blue.bold);
    console.log("‚ïê".repeat(15).gray);

    const words = await this.wordService.getAllWords();

    if (words.length === 0) {
      console.log("üìù –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –ø–æ—Ä–æ–∂–Ω—è. –î–æ–¥–∞–π—Ç–µ –ø–µ—Ä—à–µ —Å–ª–æ–≤–æ!".yellow);
      this.pause();
      return;
    }

    console.log(`\n–ó–∞–≥–∞–ª–æ–º —Å–ª—ñ–≤: ${words.length}\n`.blue);

    words.forEach((word, index) => {
      const successRate = word.getSuccessRate();
      const rateColor =
        successRate >= 80 ? "green" : successRate >= 50 ? "yellow" : "red";

      console.log(
        `${(index + 1).toString().padStart(3)}. ${word.word.bold} ‚Üí ${
          word.translation
        }`
      );
      console.log(
        `     üìä ${successRate}% (${word.correctAnswers}/${word.totalAttempts}) | üéØ –°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å: ${word.difficulty}/5`[
          rateColor
        ]
      );
      if (word.definition) {
        console.log(`     üí° ${word.definition}`.gray);
      }
      console.log();
    });

    this.pause();
  }

  async searchWord() {
    console.clear();
    console.log("üîç –ü–û–®–£–ö –°–õ–û–í–ê".magenta.bold);
    console.log("‚ïê".repeat(18).gray);

    const query = readlineSync
      .question("–í–≤–µ–¥—ñ—Ç—å —Å–ª–æ–≤–æ –∞–±–æ –ø–µ—Ä–µ–∫–ª–∞–¥ –¥–ª—è –ø–æ—à—É–∫—É: ".white)
      .trim();

    if (!query) {
      console.log("‚ùå –ó–∞–ø–∏—Ç –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø—É—Å—Ç–∏–º!".red);
      this.pause();
      return;
    }

    const words = await this.wordService.searchWords(query);

    if (words.length === 0) {
      console.log("‚ùå –ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!".red);
      this.pause();
      return;
    }

    console.log(`\n‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ ${words.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç(—ñ–≤):\n`.green);

    words.forEach((word, index) => {
      console.log(`${index + 1}. ${word.word.bold} ‚Üí ${word.translation}`);
      console.log(`   üìä ${word.getSuccessRate()}% | üéØ ${word.difficulty}/5`);
      if (word.definition) {
        console.log(`   üí° ${word.definition}`.gray);
      }
      if (word.example) {
        console.log(`   üìÑ ${word.example}`.italic);
      }
      console.log();
    });

    this.pause();
  }

  async showStats() {
    console.clear();
    console.log("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê".green.bold);
    console.log("‚ïê".repeat(15).gray);

    const stats = await this.wordService.getStats();

    console.log(
      `\nüìö –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ª—ñ–≤: ${stats.totalWords.toString().bold}`
    );
    console.log(
      `üéØ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–±: ${stats.totalAttempts.toString().bold}`
    );
    console.log(
      `‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π: ${stats.totalCorrect.toString().bold}`
    );
    console.log(
      `üìà –ó–∞–≥–∞–ª—å–Ω–∏–π –≤—ñ–¥—Å–æ—Ç–æ–∫ —É—Å–ø—ñ—Ö—É: ${stats.successRate.toString().bold}%`
    );
    console.log(`–°–µ—Ä–µ–¥–Ω—è —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å: ${stats.avgDifficulty.toString().bold}/5`);

    console.log("\n" + "‚îÄ".repeat(30).gray);

    if (stats.successRate >= 80) {
      console.log("üèÜ –í—ñ–¥–º—ñ–Ω–Ω–æ! –í–∏ —á—É–¥–æ–≤–æ —Å–ø—Ä–∞–≤–ª—è—î—Ç–µ—Å—å!".green);
    } else if (stats.successRate >= 60) {
      console.log("üëç –î–æ–±—Ä–µ! –ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –≤—á–∏—Ç–∏—Å—è!".yellow);
    } else {
      console.log("üí™ –ù–µ –∑–¥–∞–≤–∞–π—Ç–µ—Å—å! –ü—Ä–∞–∫—Ç–∏–∫–∞ - —à–ª—è—Ö –¥–æ —É—Å–ø—ñ—Ö—É!".red);
    }

    this.pause();
  }

  async deleteWord() {
    console.clear();
    console.log("üóëÔ∏è  –í–ò–î–ê–õ–ï–ù–ù–Ø –°–õ–û–í–ê".red.bold);
    console.log("‚ïê".repeat(20).gray);

    const word = readlineSync
      .question("–í–≤–µ–¥—ñ—Ç—å —Å–ª–æ–≤–æ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è: ".white)
      .trim()
      .toLowerCase();

    if (!word) {
      console.log("‚ùå –°–ª–æ–≤–æ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø—É—Å—Ç–∏–º!".red);
      this.pause();
      return;
    }

    const confirm = readlineSync.keyInYNStrict(
      `–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Å–ª–æ–≤–æ "${word}"?`.yellow
    );

    if (!confirm) {
      console.log("‚ùå –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.".gray);
      this.pause();
      return;
    }

    const deleted = await this.wordService.deleteWord(word);

    if (deleted) {
      console.log("‚úÖ –°–ª–æ–≤–æ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!".green);
    } else {
      console.log("‚ùå –°–ª–æ–≤–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!".red);
    }

    this.pause();
  }

  pause() {
    readlineSync.question("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...".gray);
  }
}

module.exports = Menu;
